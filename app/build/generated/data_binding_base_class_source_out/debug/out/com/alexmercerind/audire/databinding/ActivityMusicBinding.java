// Generated by view binder compiler. Do not edit!
package com.alexmercerind.audire.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.helper.widget.Flow;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.alexmercerind.audire.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.chip.Chip;
import com.google.android.material.chip.ChipGroup;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMusicBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final Chip albumChip;

  @NonNull
  public final TextView artistsTextView;

  @NonNull
  public final ChipGroup chipGroup;

  @NonNull
  public final View colorView;

  @NonNull
  public final ImageView coverImageView;

  @NonNull
  public final View coverPositionView;

  @NonNull
  public final MaterialButton downloadMaterialButton;

  @NonNull
  public final View flexView;

  @NonNull
  public final View gradientView;

  @NonNull
  public final Chip labelChip;

  @NonNull
  public final Flow linksFlow;

  @NonNull
  public final TextView lyricsBodyTextView;

  @NonNull
  public final TextView lyricsTitleTextView;

  @NonNull
  public final MaterialButton searchMaterialButton;

  @NonNull
  public final MaterialButton spotifyMaterialButton;

  @NonNull
  public final View statusBarGradientView;

  @NonNull
  public final TextView titleTextView;

  @NonNull
  public final Chip yearChip;

  @NonNull
  public final MaterialButton youtubeMaterialButton;

  private ActivityMusicBinding(@NonNull ScrollView rootView, @NonNull Chip albumChip,
      @NonNull TextView artistsTextView, @NonNull ChipGroup chipGroup, @NonNull View colorView,
      @NonNull ImageView coverImageView, @NonNull View coverPositionView,
      @NonNull MaterialButton downloadMaterialButton, @NonNull View flexView,
      @NonNull View gradientView, @NonNull Chip labelChip, @NonNull Flow linksFlow,
      @NonNull TextView lyricsBodyTextView, @NonNull TextView lyricsTitleTextView,
      @NonNull MaterialButton searchMaterialButton, @NonNull MaterialButton spotifyMaterialButton,
      @NonNull View statusBarGradientView, @NonNull TextView titleTextView, @NonNull Chip yearChip,
      @NonNull MaterialButton youtubeMaterialButton) {
    this.rootView = rootView;
    this.albumChip = albumChip;
    this.artistsTextView = artistsTextView;
    this.chipGroup = chipGroup;
    this.colorView = colorView;
    this.coverImageView = coverImageView;
    this.coverPositionView = coverPositionView;
    this.downloadMaterialButton = downloadMaterialButton;
    this.flexView = flexView;
    this.gradientView = gradientView;
    this.labelChip = labelChip;
    this.linksFlow = linksFlow;
    this.lyricsBodyTextView = lyricsBodyTextView;
    this.lyricsTitleTextView = lyricsTitleTextView;
    this.searchMaterialButton = searchMaterialButton;
    this.spotifyMaterialButton = spotifyMaterialButton;
    this.statusBarGradientView = statusBarGradientView;
    this.titleTextView = titleTextView;
    this.yearChip = yearChip;
    this.youtubeMaterialButton = youtubeMaterialButton;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMusicBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMusicBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_music, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMusicBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.albumChip;
      Chip albumChip = ViewBindings.findChildViewById(rootView, id);
      if (albumChip == null) {
        break missingId;
      }

      id = R.id.artistsTextView;
      TextView artistsTextView = ViewBindings.findChildViewById(rootView, id);
      if (artistsTextView == null) {
        break missingId;
      }

      id = R.id.chipGroup;
      ChipGroup chipGroup = ViewBindings.findChildViewById(rootView, id);
      if (chipGroup == null) {
        break missingId;
      }

      id = R.id.colorView;
      View colorView = ViewBindings.findChildViewById(rootView, id);
      if (colorView == null) {
        break missingId;
      }

      id = R.id.coverImageView;
      ImageView coverImageView = ViewBindings.findChildViewById(rootView, id);
      if (coverImageView == null) {
        break missingId;
      }

      id = R.id.coverPositionView;
      View coverPositionView = ViewBindings.findChildViewById(rootView, id);
      if (coverPositionView == null) {
        break missingId;
      }

      id = R.id.downloadMaterialButton;
      MaterialButton downloadMaterialButton = ViewBindings.findChildViewById(rootView, id);
      if (downloadMaterialButton == null) {
        break missingId;
      }

      id = R.id.flexView;
      View flexView = ViewBindings.findChildViewById(rootView, id);
      if (flexView == null) {
        break missingId;
      }

      id = R.id.gradientView;
      View gradientView = ViewBindings.findChildViewById(rootView, id);
      if (gradientView == null) {
        break missingId;
      }

      id = R.id.labelChip;
      Chip labelChip = ViewBindings.findChildViewById(rootView, id);
      if (labelChip == null) {
        break missingId;
      }

      id = R.id.linksFlow;
      Flow linksFlow = ViewBindings.findChildViewById(rootView, id);
      if (linksFlow == null) {
        break missingId;
      }

      id = R.id.lyricsBodyTextView;
      TextView lyricsBodyTextView = ViewBindings.findChildViewById(rootView, id);
      if (lyricsBodyTextView == null) {
        break missingId;
      }

      id = R.id.lyricsTitleTextView;
      TextView lyricsTitleTextView = ViewBindings.findChildViewById(rootView, id);
      if (lyricsTitleTextView == null) {
        break missingId;
      }

      id = R.id.searchMaterialButton;
      MaterialButton searchMaterialButton = ViewBindings.findChildViewById(rootView, id);
      if (searchMaterialButton == null) {
        break missingId;
      }

      id = R.id.spotifyMaterialButton;
      MaterialButton spotifyMaterialButton = ViewBindings.findChildViewById(rootView, id);
      if (spotifyMaterialButton == null) {
        break missingId;
      }

      id = R.id.statusBarGradientView;
      View statusBarGradientView = ViewBindings.findChildViewById(rootView, id);
      if (statusBarGradientView == null) {
        break missingId;
      }

      id = R.id.titleTextView;
      TextView titleTextView = ViewBindings.findChildViewById(rootView, id);
      if (titleTextView == null) {
        break missingId;
      }

      id = R.id.yearChip;
      Chip yearChip = ViewBindings.findChildViewById(rootView, id);
      if (yearChip == null) {
        break missingId;
      }

      id = R.id.youtubeMaterialButton;
      MaterialButton youtubeMaterialButton = ViewBindings.findChildViewById(rootView, id);
      if (youtubeMaterialButton == null) {
        break missingId;
      }

      return new ActivityMusicBinding((ScrollView) rootView, albumChip, artistsTextView, chipGroup,
          colorView, coverImageView, coverPositionView, downloadMaterialButton, flexView,
          gradientView, labelChip, linksFlow, lyricsBodyTextView, lyricsTitleTextView,
          searchMaterialButton, spotifyMaterialButton, statusBarGradientView, titleTextView,
          yearChip, youtubeMaterialButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
